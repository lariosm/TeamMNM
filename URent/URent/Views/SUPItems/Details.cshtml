@model URent.Models.ItemDetailsViewModel

@{
    ViewBag.Title = Html.DisplayFor(model => model.sUPItem.ItemName);
}

@*@if (Request.IsAuthenticated) //Is a logged in user viewing this page?
    {
        //If so, show the user sidebar.
        Layout = "~/Views/Shared/_UserPageLayout.cshtml";
    }*@

<div class="container">

    <!-- Item name -->
    <h2>@Html.DisplayFor(model => model.sUPItem.ItemName)</h2>

    <!-- Rating stats for this item -->
    <div style="display: flex">
        <h4 style="color: gold; padding-right: 5px;">@String.Format("{0:0.0}", Model.RatingAverage)</h4>
        <div class="rateit" data-rateit-value="@Model.RatingAverage" data-rateit-ispreset="true" data-rateit-mode="font" data-rateit-readonly="true" style="font-size: 25px;"></div>
        <h5 class="text-muted" style="padding-left: 10px">@Model.RatingCount review(s)</h5>
    </div>

    <br />

    <!-- Item photo -->
    <div id="carouselExampleSlidesOnly" class="carousel slide" data-ride="carousel">
        <div class="carousel-inner">
            <div class="carousel-item active">
                @if (ViewBag.Send != null) //Does a photo for this item exist?
                {
                    //If so, display the photo.
                    <img class="d-block w-100" src="/Resources/Photo/@ViewBag.Send" alt="Item photo">
                }
                else
                {
                    //If not, display a placeholder image instead.
                    <img class="d-block w-100" src="~/Content/Img/default.png" alt="Placeholder image" />
                }
            </div>
        </div>
    </div>

    <hr />

    <!-- Item details -->
    <div class="row">
        <div class="col-sm-3">
            <dt>Owner name</dt>
            <dd>
                @Html.ActionLink(Model.sUPItem.SUPUser.FirstName + " " + Model.sUPItem.SUPUser.LastName, "UserProfile", "SUPUsers", new { id = Model.sUPItem.SUPUser.Id }, null)
            </dd>
        </div>
        <div class="col-sm-3">
            <dt>Item location</dt>
            <dd>
                @Html.DisplayFor(model => model.sUPItem.SUPUser.CityAddress),
                @Html.DisplayFor(model => model.sUPItem.SUPUser.StateAddress)
            </dd>
        </div>
        <div class="col-sm-3">
            <dt>@Html.DisplayNameFor(model => model.sUPItem.DailyPrice)</dt>
            <dd>
                @String.Format("{0:C}", Model.sUPItem.DailyPrice)/day
            </dd>
        </div>
        <div class="col-sm-3">
            <dt>@Html.DisplayNameFor(model => model.sUPItem.IsAvailable)</dt>
            @if (Model.sUPItem.IsAvailable == true)
            {
                <dd style="color:green">Available</dd>
            }
            else
            {
                <dd style="color:red">Not available</dd>
            }
        </div>
    </div>

    <!-- Item description -->
    <div class="row">
        <div class="col-sm-12">
            <dl>
                <dt>@Html.DisplayNameFor(model => model.sUPItem.Description)</dt>
                <dd>@Html.DisplayFor(model => model.sUPItem.Description)</dd>
            </dl>
        </div>
    </div>

    <br />

    @if (Model.sUPItem.IsAvailable == true) //Is the item available?
    {
        // added Request.IsAuthenticated which takes away button to rent items when you are not logged in
        //did this to fix bug where user could rent own item from not being logged in pressing this button and then loggin in
        if (Model.sUPItem.OwnerID != Model.UserDoingReviewID)
        {
            //If so, then we show a "Rent" button.
            @Html.ActionLink("Rent", "Create", "SUPTransactions", new { itemId = Model.sUPItem.Id, dailyPrice = Model.sUPItem.DailyPrice }, new { @class = "btn btn-primary" })
        }
        else if (Request.IsAuthenticated && Model.sUPItem.OwnerID == Model.UserDoingReviewID)
        {
            //If not, we show a "Request" button.
            @Html.ActionLink("Set Unavailable", "makeUnavailable", "SUPItems", new { itemId = Model.sUPItem.Id }, new { @class = "btn btn-primary" })
        }
    }

    @if (Model.sUPItem.IsAvailable == false)
    {
        if (Request.IsAuthenticated && Model.sUPItem.OwnerID == Model.UserDoingReviewID)
        {
            // set unavailable
            @Html.ActionLink("Set Available", "makeAvailable", "SUPItems", new { itemId = Model.sUPItem.Id }, new { @class = "btn btn-primary" })

        }
    }

    @if (Request.IsAuthenticated && Model.sUPItem.OwnerID == Model.UserDoingReviewID) //Is a logged in user viewing this page?
    {
        //Show an "Edit listing" button.
        @Html.ActionLink("Edit listing", "Edit", new { id = Model.sUPItem.Id }, new { @class = "btn btn-outline-primary" })
    }
    <div type="hidden" id="itemId" data-id="@Model.sUPItem.Id"></div>
    <br>

    @*<label>Dates</label>*@

    @*<p>
            <div id="myDatePicker" class="DateBox datepicker" style="width:100%;height:200px;"></div>
                <input class="form-group form-control col-md-2" type="hidden" id="dateHidden" name="datePicker" placeholder="MM/DD/YYYY" />
            <input type="text" id="d" />
            <div id="z"></div>
        </p>*@

    <br />
    <br />

    <h3>User reviews for this item</h3>
    <hr />

    @if (Model.sUPItemReviews.Any())
    {
        int i = 0;
        foreach (var item in Model.sUPItemReviews)
        {
            @Html.ActionLink(item.SUPUser.FirstName + " " + item.SUPUser.LastName, "UserProfile", "SUPUsers", new { id = item.UserDoingReviewID }, null)
            <div style="display: flex">
                <div class="rateit" data-rateit-value="@item.Rating" data-rateit-ispreset="true" data-rateit-mode="font" data-rateit-readonly="true" style="font-size: 25px;"></div>
                <p class="text-muted" style="padding-left: 10px">@String.Format("{0:MM/dd/yyyy}", item.Timestamp)</p>
            </div>
            <p>@item.Details</p>

            <br />

            i++;
            if (i == 3)
            {
                break;
            }
        }
        <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModalCenter">
            Show all reviews
        </button>
    }
    else
    {
        <h5 style="text-align: center">No reviews yet. Be the first to review this item.</h5>
    }

    <!-- Modal -->
        <div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalCenterTitle">All reviews for this item</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        @if (Model.sUPItemReviews.Any())
                        {
                            foreach (var item in Model.sUPItemReviews)
                            {
                                @Html.ActionLink(item.SUPUser.FirstName + " " + item.SUPUser.LastName, "UserProfile", "SUPUsers", new { id = item.UserDoingReviewID }, null)
                                <div style="display: flex">
                                    <div class="rateit" data-rateit-value="@item.Rating" data-rateit-ispreset="true" data-rateit-mode="font" data-rateit-readonly="true" style="font-size: 25px;"></div>
                                    <p class="text-muted" style="padding-left: 10px">@String.Format("{0:MM/dd/yyyy}", item.Timestamp)</p>
                                </div>
                                <p>@item.Details</p>

                                <br />
                            }
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>

    <br />
    <br />

    @if (Model.sUPItem.OwnerID != Model.UserDoingReviewID && Request.IsAuthenticated)
    {
        <h3>Leave a review for this item</h3>
        <hr />

        using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <fieldset class="rating">
                @Html.RadioButtonFor(model => model.Ratings, "5", new { id = "star5", name = "rating" })<label for="star5">5 stars</label>
                @Html.RadioButtonFor(model => model.Ratings, "4", new { id = "star4", name = "rating" })<label for="star4">4 stars</label>
                @Html.RadioButtonFor(model => model.Ratings, "3", new { id = "star3", name = "rating" })<label for="star3">3 stars</label>
                @Html.RadioButtonFor(model => model.Ratings, "2", new { id = "star2", name = "rating" })<label for="star2">2 stars</label>
                @Html.RadioButtonFor(model => model.Ratings, "1", new { id = "star1", name = "rating" })<label for="star1">1 star</label>
            </fieldset>

            <br />
            @Html.ValidationMessageFor(model => model.Ratings, "", new { @class = "text-danger" })


            @Html.TextAreaFor(model => model.Details, new { @class = "form-control", @rows = 5, @placeholder = "Review this item..." })
            @Html.ValidationMessageFor(model => model.Details, "", new { @class = "text-danger" })

            @Html.HiddenFor(model => model.ItemBeingReviewedID)
            @Html.HiddenFor(model => model.UserDoingReviewID)

            <br />

            <input type="submit" value="Submit Review" class="btn btn-primary" />
        }
    }
</div>

@section Scripts {
    @Styles.Render("~/Content/cssjqueryui")
    @Styles.Render("~/Content/rateit.min.css")
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jqueryui")
    @*@Scripts.Render("~/Scripts/Calendar.js")*@
    @Scripts.Render("~/Scripts/jquery.rateit.min.js")
}